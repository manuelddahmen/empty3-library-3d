plugins {
    id("application") // enabling the plugin here
    id("java")
    id 'java-library'
    id 'maven-publish'
    id 'signing'
    //id 'org.jetbrains.kotlin.jvm' version '1.8.10'
    id 'org.jetbrains.kotlin.multiplatform' version '1.8.10'
}


sourceSets {
    main {
        resources {
            srcDirs "src/main/resources", "src/main/configs", "src/main/java"
            }
        }
    commonTest {

    }
}

kotlin {
    //macosX64('native') { // on macOS
   // linuxX64('native') // on Linux
    mingwX64('native') // on Windows
//        binaries {
//            executable()
//        }
}

Properties properties = new Properties()
try {
    // Other configuration here
    File propertiesFile = new File('../private.properties/gradle.properties')
    propertiesFile.withInputStream {
        properties.load(it)
    }
} catch (Exception ex) {
    ex.printStackTrace()
}

tasks.register('copyDeps', Copy) {
    //from(configurations.compile + configurations.testCompile) {
        include ".jar"
        include ".so", "*.dll"
    //}
}
def load = properties
java {
    withSourcesJar()
}
tasks.register('FeatureAppGui', JavaExec) {
    classpath sourceSets.main.runtimeClasspath
    mainClass = "one.empty3.feature.ClassSchemaBuilder"
    args "arg1", "arg2"
}
tasks.register('MorphingAppGui', JavaExec) {
    classpath sourceSets.main.runtimeClasspath
    mainClass = "one.empty3.apps.morph.Main"
    args "arg1", "arg2"
}
tasks.register('OpadGameGui', JavaExec) {
    classpath sourceSets.main.runtimeClasspath
    mainClass = "one.empty3.apps.opad.PanelGraphics"
}
tasks.register('BoardGameGui', JavaExec) {
    classpath sourceSets.main.runtimeClasspath
    mainClass = "one.empty3.apps.newboardgames.WindowDrawing"
    args "arg1", "arg2"
}
tasks.register('ResolutionCharacter7', JavaExec) {
    classpath sourceSets.main.runtimeClasspath
    mainClass = "one.empty3.feature.tryocr.ResolutionCharacter7"
    args "arg1", "arg2"
}
tasks.register('RunEffect from sets directory', JavaExec) {
    classpath sourceSets.main.runtimeClasspath
    mainClass = "one.empty3.feature.Run"
    args "fourier_series"
}
signing {
    def signingKey = load.get("signing.keyId")
    def signingPassword = load.get("signing.password")

    useGpgCmd()
    //useInMemoryPgpKeys(signingKey, signingPassword)

    sign publishing.publications
    sign configurations.archives
}


repositories {
    google()
    mavenCentral()
    maven {
        url = uri("https://repo.maven.apache.org/maven2/")
    }
    maven {
        url = uri("https://s01.oss.sonatype.org/content/repositories/snapshots/")
    }
    maven {
        url = uri("https://repository.sonatype.org/content/groups/public/")
    }
    maven {
        url = uri("https://mvnrepository.com/")
    }
    maven {
        url = uri("https://maven.scijava.org/content/repositories/public/")
    }
    maven {
        url "https://maven.jzy3d.org/releases/"
    }
    maven {
        url "https://www.jetbrains.com/intellij-repository/releases"
    }
    flatDir dirs: "${rootDir}/lib"
}

sourceCompatibility = JavaVersion.VERSION_11
targetCompatibility = JavaVersion.VERSION_11



dependencies {
    implementation 'junit:junit:3.8.2'
    testImplementation project(path: ':')
    /*implementation("com.metsci.ext.org.jogamp.gluegen:gluegen-rt:v2.4.0-rc4")
    implementation("com.metsci.ext.org.jogamp.jogl:jogl-all:v2.4.0-rc4")
    implementation "com.metsci.ext.org.jogamp.gluegen:gluegen-rt:2.4.0-rc-20200202:natives-windows-amd64"
    implementation "com.metsci.ext.org.jogamp.jogl:jogl-all:2.4.0-rc-20200202:natives-windows-amd64"
    */
    //implementation('org.tensorflow:tensorflow-core-platform:0.4.1')
    //implementation 'org.tensorflow:tensorflow-core-api:0.4.1:windows-x86_64${javacpp.platform.extension}'

    def jogl = '2.3.2'
    implementation "org.jogamp.jogl:jogl-all:$jogl"
    implementation group: 'org.jogamp.gluegen', name: 'gluegen-rt-main', version:"$jogl"
    implementation group: 'org.jogamp.jogl', name: 'jogl-all-main', version:"$jogl"
    implementation 'ai.djl:api:0.19.0'
    //implementation('com.android.tools.build:gradle-api:4.0.2')
    implementation("org.jcodec:jcodec-javase:0.2.5")
    implementation("org.jogamp.jogl:jogl-all-main:$jogl")
    implementation("com.miglayout:miglayout:3.7.4")
    implementation('com.badlogicgames.gdx:gdx:1.11.0')
    implementation("xom:xom:1.3.8")
    implementation("com.jgoodies:jgoodies-common:1.8.2")
    implementation("com.jgoodies:jgoodies-forms:1.9.0")
    // https://mvnrepository.com/artifact/com.google.android/android
    compileOnly group: 'com.google.android', name: 'android', version: '4.1.1.4'
    implementation('xerces:xercesImpl:2.12.2')
    implementation('com.formdev:flatlaf:2.6')
    implementation("org.jdesktop:beansbinding:1.2.1")
    implementation("junit:junit:4.13.2")
    implementation("com.github.sarxos:webcam-capture:0.3.12")
    // https://mvnrepository.com/artifact/commons-net/commons-net
    implementation group: 'commons-net', name: 'commons-net', version: '3.9.0'

    implementation("org.jdom:jdom2:2.0.6.1")
    implementation("org.apache.servicemix.bundles:org.apache.servicemix.bundles.jdom:2.0.6.1_1")
    testImplementation("junit:junit:4.13.2")
    testImplementation('org.junit.jupiter:junit-jupiter-api:5.9.0')
    testRuntimeOnly('org.junit.jupiter:junit-jupiter-engine:5.9.0')
    implementation 'com.jetbrains.intellij.java:java-gui-forms-rt:203.7148.30'
    //implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk8"
}

test {
    // show standard out and standard error of the test JVM(s) on the console
    useJUnitPlatform()
    testLogging.showStandardStreams = true
}

tasks.register('sourceJar', Jar) {
    //archiveClassifier "sourcesJar"
    from sourceSets.main.allJava
}

tasks.register('javadocJar', Jar) {
    dependsOn javadoc
    //archiveClassifier "javadoc"
    from javadoc.destinationDir
}


tasks.register('copyTask', Copy) {
    from 'src/main/java/'
    into 'build/classes/java/main'
}
javadoc {
    if (JavaVersion.current().isJava9Compatible()) {
        options.addBooleanOption('html5', true)
    }
}

java {
    withJavadocJar()
    withSourcesJar()
}

javadoc {
    if (JavaVersion.current().isJava9Compatible()) {
        options.addBooleanOption('html5', true)
    }
}


publishing {
    publications {
        maven(MavenPublication) {
            groupId = 'one.empty3'
            artifactId = 'empty3-library-generic'
            version = "2023.2.17"
            from components.java

            project.tasks.withType(Sign) {
                signatures.all {

                }
            }

            // The pom can be enriched as usual
            pom {
                name = 'empty3-library-generic'
                description = '3D rendering engine. Plus modeling. Expected glsl textures 3d and 2d rendering'
                packaging 'jar'
                url = "https://github.com/manuelddahmen/empty3"

                licenses {
                    license {
                        name = "Apache version 2"
                        url = "https://www.apache.org/licenses/LICENSE-2.0"
                        distribution = "repo"
                    }
                }

                scm {

                    url = "https://github.com/manuelddahmen/empty3"
                    connection = "scm:git:https://github.com/manuelddahmen/empty3.git"
                    developerConnection = "scm:git:https://github.com/manuelddahmen/empty3.git"

                }
                developers {
                    developer {
                        email = "dathewolf@gmail.com"
                        name = "Manuel Daniel Dahmen"

                        url = "https://github.com/manuelddahmen"
                        id = "manuelddahmen"
                    }
                }

            }
        }
    }

    repositories {
        maven {
            name = "JetBrainsSpaceEmpty3"
            url = "https://maven.pkg.jetbrains.space/empty3/p/empty3/maven/maven"
            credentials {
                // Automation has a special account for authentication in Space
                // account credentials are accessible via env vars
                username = load.get("spaceUsername")
                password = load.get("spacePassword")
            }

        }
        maven {
            name = "OSSRH"
            url = "https://oss.sonatype.org/service/local/staging/deploy/maven2/"
            credentials {
                username = load.get("ossrhUsername")
                password = load.get("ossrhPassword")
            }

        }
        /*maven {
            name = "GitHubPackages"
            url = uri("https://maven.pkg.github.com/manuelddahmne/empty3")
            credentials {
                username = load.get("GITHUB_ACTOR")
                password = load.get("GITHUB_TOKEN")
            }
        }*/
    }
}